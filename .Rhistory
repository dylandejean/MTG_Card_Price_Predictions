train <- rbind(season,tourney)
setnames(train, c('WTeamID','LTeamID'), c('team_1','team_2'))
View(train)
View(test)
test$DayNum <- 134
test <- test[,.(team_1,team_2,Season,DayNum)]
train <- train[,.(team_1,team_2,Season,DayNum)]
View(test)
train$result <- 1
test <- strsplit(test$ID,'_') %>% unlist %>% matrix(ncol=3,byrow=T) %>% data.table
View(test)
setnames(test, c('V1','V2','V3'), c('Season','team_1','team_2'))
View(test)
test$DayNum <- 134
test <- test[,.(team_1,team_2,Season,DayNum)]
View(test)
test$result <- 0.5
master <- rbind(train,test)
View(master)
master$team_1 <- as.character(master$team_1)
master$team_2 <- as.character(master$team_2)
master$Season <- as.integer(master$Season)
master$DayNum <- as.integer(master$DayNum)
View(ranks)
setnames(ranks, 'RankingDayNum', 'DayNum')
ranks$TeamID <- as.character(ranks$TeamID)
ranks$Season <- as.integer(ranks$Season)
ranks$DayNum <- as.integer(ranks$DayNum)
View(ranks)
### order the count by system
ranks[, .N, by=SystemName][order(-N)]
View(ranks)
### order the count by system
ranks[, .N, by=SystemName][order(-N)]
View(ranks)
### pick the most frequent 3 systems
systems <- c('SAG','MOR','POM')
### calculate the rank difference between teams in each game
for(system in systems){
### subset ranks by each system
one_rank <- ranks[SystemName==system,.(Season,DayNum,TeamID,OrdinalRank)]
### change TeamID to team_1
setnames(one_rank,'TeamID','team_1')
setnames(one_rank,'OrdinalRank','team_1_rank')
### rolling join master to one_rank by team_1,Season,Daynum
setkey(master,team_1,Season,DayNum)
setkey(one_rank,team_1,Season,DayNum)
master <- one_rank[master,roll=T]
### https://www.gormanalysis.com/blog/r-data-table-rolling-joins/
### change team_1 to team_2
setnames(one_rank,'team_1','team_2')
setnames(one_rank,'team_1_rank','team_2_rank')
### rolling join master to one_rank by team_2,Season,Daynum
setkey(master,team_2,Season,DayNum)
setkey(one_rank,team_2,Season,DayNum)
master <- one_rank[master,roll=T]
### calculate the rank difference and discard each rank
master$rank_diff <- master$team_2_rank - master$team_1_rank
master$team_1_rank <- NULL
master$team_2_rank <- NULL
### change rank_diff to [system]_diff
setnames(master, 'rank_diff', paste0(system,'_diff'))
}
View(master)
master <- master[order(Season,DayNum),
.(team_1,team_2,SAG_diff,MOR_diff,POM_diff,result)]
View(master)
### ignore observations with missing values
master <- master[!is.na(master$SAG_diff)]
master <- master[!is.na(master$MOR_diff)]
master <- master[!is.na(master$POM_diff)]
train <- master[result==1]
test <- master[result==0.5]
View(train)
### change random observations to losing scenario
rand_inx <- sample(1:nrow(train),nrow(train)*0.5)
train_a <- train[rand_inx,]
train_b <- train[!rand_inx,]
train_b$result <- 0
train_b$SAG_diff <- -train_b$SAG_diff
train_b$MOR_diff <- -train_b$MOR_diff
train_b$POM_diff <- -train_b$POM_diff
train <- rbind(train_a,train_b)
View(train)
### Plot SAG_diff versus result
ggplot(train)+
aes(x=SAG_diff,fill=as.factor(result))+
geom_density()
fwrite(train,'./project/volume/data/interim/train.csv')
fwrite(test,'./project/volume/data/interim/test.csv')
file.edit('./project/src/models/train_model.R')
library(data.table)
library(caret)
library(magrittr)
train <- fread('./project/volume/data/interim/train.csv')
train_y <- train$result
train$team_1 <- NULL
train$team_2 <- NULL
test <- fread('./project/volume/data/interim/test.csv')
test$team_1 <- NULL
test$team_2 <- NULL
dummies <- dummyVars(result ~ ., data = train)
View(dummies)
train <- predict(dummies, newdata = train)
test <- predict(dummies, newdata = test)
View(train)
train <- data.table(train)
train$result <- train_y
test <- data.table(test)
View(train)
dummies <- dummyVars(result ~ ., data = train)
train <- predict(dummies, newdata = train)
View(train)
test <- predict(dummies, newdata = test)
View(test)
train <- data.table(train)
train$result <- train_y
test <- data.table(test)
model <- glm(result~., family=binomial, data=train)
summary(model)
saveRDS(dummies,'./project/volume/models/model.dummies')
saveRDS(model,'./project/volume/models/model.model')
pred <- predict(model, newdata = test, type='response')
test <- fread('./project/volume/data/interim/test.csv')
test$result <- pred
### open sample submission and keep the order
submit <- fread('./project/volume/data/raw/sample_sub.csv')
submit$order <- 1:nrow(submit)
### add team_1 and team_2 to submit
teams <- strsplit(submit$id,'_') %>% unlist %>% matrix(ncol=2,byrow=T) %>% data.table
install.packages("glmnet") # new
install.packages("plotmo") # new
library(data.table)
library(caret)
train <- fread("./project/volume/data/raw/start_train.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
train <- fread("./project/volume/data/raw/start_train.csv")
test <- fread("./project/volume/data/raw/start_test.csv")
card_tab <- fread("./project/volume/data/raw/card_tab.csv")
### remove duplicates
train <- train[!duplicated(train),]
card_tab <- card_tab[!duplicated(card_tab),]
View(card_tab)
View(test)
### make a future price column for test, even though it is unknown
### We will not use this, which is only to make them two tables the same size
test$future_price <- 0
View(test)
### add a column that lets you easily differentiate
### between train and test rows once they are together
train$train <- 1
test$train <- 0
View(test)
### now bind them together
master <- rbind(train, test)
View(master)
### define legendary 1 if the card's supertype is legendary or 0 otherwise
unique(card_tab$supertypes)
card_tab$legendary <- 0
View(card_tab)
card_tab$legendary[grep("Legendary",card_tab$supertypes)] <- 1
View(card_tab)
### make a table for type
unique(card_tab$types)
types_tab <- as.data.table(tstrsplit(card_tab$types," "))
View(types_tab)
types_tab$id <- card_tab$id
View(types_tab)
### make a dummy variable for type
types_tab_m <- melt(types_tab, id.vars = "id")
View(types_tab_m)
types_tab_m <- types_tab_m[!is.na(types_tab_m$value)]
types_tab <- dcast(types_tab_m, id ~ value, length)
View(types_tab)
### merge with master
setkey(master,id)
setkey(card_tab,id)
View(types_tab)
### define legendary 1 if the card's supertype is legendary or 0 otherwise
unique(card_tab$supertypes)
card_tab$legendary <- 0
card_tab$legendary[grep("Legendary",card_tab$supertypes)] <- 1
### make a table for type
unique(card_tab$types)
types_tab <- as.data.table(tstrsplit(card_tab$types," "))
types_tab$id <- card_tab$id
### make a dummy variable for type
types_tab_m <- melt(types_tab, id.vars = "id")
types_tab_m <- types_tab_m[!is.na(types_tab_m$value)]
types_tab <- dcast(types_tab_m, id ~ value)
View(types_tab)
### merge with master
setkey(master,id)
setkey(card_tab,id)
master <- merge(master, card_tab[,.(id,rarity,legendary)], all.x=T)
View(master)
setkey(types_tab,id)
master <- merge(master, types_tab, all.x=T)
View(card_tab)
train <- master[train==1]
test <- master[train==0]
### clean up columns
train$train <- NULL
test$train <- NULL
test$future_price <- NULL
fwrite(train, "./project/volume/data/interim/train.csv")
fwrite(test, "./project/volume/data/interim/test.csv")
file.edit('./project/src/models/train_model.R')
# Libraries ---------------------------------------------------------------
library(data.table)
library(caret)
library(glmnet)
library(plotmo)
# Load train and test -----------------------------------------------------
train <- fread("./project/volume/data/interim/train.csv")
test <- fread("./project/volume/data/interim/test.csv")
### remove duplicates
train <- train[!duplicated(train),]
### keep future_price as train_y
train_y <- train$future_price
# Drop id -----------------------------------------------------------------
drops <- c('id')
train <- train[, !drops, with = FALSE]
test <- test[, !drops, with = FALSE]
# fit a linear model ------------------------------------------------------
model0 <- lm(future_price~., data=train)
summary(model0)
pred <- predict(model0, newdata=test)
sample_sub <- fread("./project/volume/data/raw/sample_sub.csv")
sample_sub$future_price <- pred
fwrite(sample_sub, "./project/volume/data/processed/submit_lm.csv")
View(sample_sub)
train <- fread('./project/volume/data/interim/train.csv')
test <- fread('./project/volume/data/interim/test.csv')
train <- train[!duplicated(train),]
train_y <- train$future_price
train <- fread('./project/volume/data/interim/train.csv')
test <- fread('./project/volume/data/interim/test.csv')
train <- train[!duplicated(train),]
train_y <- train$future_price
drops <- c('id')
model0 <- lm(future_price ~ ., data=train[, !drops, with = F])
pred <- predict(model0, newdata=test[, !drops, with = F])
result <- data.table(id=test$id, future_price = pred)
View(result)
sample_sub <- fread('./project/volume/data/raw/sample_sub.csv')
sample_sub$future_price <- NULL
setkey(sample_sub, id)
setkey(result, id)
sample_sub <- merge(sample_sub, result, sort = F)
fwrite(sample_sub, './project/volume/data/processed/submit_lm.csv')
drops <- c('id')
train <- train[, !drops, with=F]
test <- test[, !drops, with=F]
### make fake future_price for dummyVars
test$future_price <- 0
### work with dummies
dummies <- dummyVars(future_price ~ ., data=train)
train <- predict(dummies, newdata=train)
test <- predict(dummies, newdata=test)
View(test)
View(train)
### convert them back to data.table
train <- data.table(train)
test <- data.table(test)
### glmnet needs matrix
train <- as.matrix(train)
### fit a model
model1 <- cv.glmnet(train, train_y, alpha=1, family="gaussian")
### choose the best lambda
best_lambda <- model1$lambda.min
### see what predictors chosen from the lambda
predict(model1, s=best_lambda, newx=test, type="coefficients")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
file.edit('./project/src/features/build_features.R')
library(data.table)
library(caret)
train <- fread("./project/volume/data/raw/start_train.csv")
test <- fread("./project/volume/data/raw/start_test.csv")
card_tab <- fread("./project/volume/data/raw/card_tab.csv")
set_tab <- fread('./project/volume/data/raw/set_tab.csv')
### remove duplicates
train <- train[!duplicated(train),]
card_tab <- card_tab[!duplicated(card_tab),]
set_tab <- set_tab[!duplicated(set_tab),]
file.edit('./project/required/requirements.R')
file.edit('./project/src/features/build_features.R')
library(data.table)
library(caret)
train <- fread("./project/volume/data/raw/start_train.csv")
test <- fread("./project/volume/data/raw/start_test.csv")
card_tab <- fread("./project/volume/data/raw/card_tab.csv")
set_tab <- fread('./project/volume/data/raw/set_tab.csv')
### remove duplicates
train <- train[!duplicated(train),]
card_tab <- card_tab[!duplicated(card_tab),]
set_tab <- set_tab[!duplicated(set_tab),]
### make a future price column for test, even though it is unknown
### We will not use this, which is only to make them two tables the same size
test$future_price <- 0
### add a column that lets you easily differentiate
### between train and test rows once they are together
train$train <- 1
test$train <- 0
### now bind them together
master <- rbind(train, test)
View(test)
View(train)
test <- fread("./project/volume/data/raw/start_test.csv")
test <- fread("./project/volume/data/raw/start_test.csv")
### remove duplicates
train <- train[!duplicated(train),]
card_tab <- card_tab[!duplicated(card_tab),]
set_tab <- set_tab[!duplicated(set_tab),]
### make a future price column for test, even though it is unknown
### We will not use this, which is only to make them two tables the same size
test$future_price <- 0
View(train)
train <- fread("./project/volume/data/raw/start_train.csv")
### remove duplicates
train <- train[!duplicated(train),]
### add a column that lets you easily differentiate
### between train and test rows once they are together
train$train <- 1
test$train <- 0
### now bind them together
master <- rbind(train, test)
### define legendary 1 if the card's supertype is legendary or 0 otherwise
unique(card_tab$supertypes)
card_tab$legendary <- 0
card_tab$legendary[grep("Legendary",card_tab$supertypes)] <- 1
### make a table for type
unique(card_tab$types)
types_tab <- as.data.table(tstrsplit(card_tab$types," "))
types_tab$id <- card_tab$id
### make a dummy variable for type
types_tab_m <- melt(types_tab, id.vars = "id")
types_tab_m <- types_tab_m[!is.na(types_tab_m$value)]
types_tab <- dcast(types_tab_m, id ~ value)
View(types_tab_m)
### merge with master
setkey(master,id)
setkey(card_tab,id)
master <- merge(master, card_tab[,.(id,rarity,legendary)], all.x=T)
setkey(types_tab,id)
master <- merge(master, types_tab, all.x=T)
View(master)
View(types_tab_m)
train <- master[train==1]
test <- master[train==0]
### clean up columns
train$train <- NULL
test$train <- NULL
test$future_price <- NULL
fwrite(train, "./project/volume/data/interim/train.csv")
fwrite(test, "./project/volume/data/interim/test.csv")
file.edit('./project/src/models/train_model.R')
library(data.table)
library(caret)
library(glmnet)
library(plotmo)
train <- fread("./project/volume/data/interim/train.csv")
test <- fread("./project/volume/data/interim/test.csv")
### remove duplicates
train <- train[!duplicated(train),]
### keep future_price as train_y
train_y <- train$future_price
drops <- c('id')
train <- train[, !drops, with = FALSE]
test <- test[, !drops, with = FALSE]
model0 <- lm(future_price~., data=train)
summary(model0)
pred <- predict(model0, newdata=test)
sample_sub <- fread("./project/volume/data/raw/sample_sub.csv")
sample_sub$future_price <- pred
fwrite(sample_sub, "./project/volume/data/processed/submit_lm.csv")
# Make a submission file with merge
train <- fread('./project/volume/data/interim/train.csv')
test <- fread('./project/volume/data/interim/test.csv')
train <- train[!duplicated(train),]
train_y <- train$future_price
drops <- c('id')
model0 <- lm(future_price ~ ., data=train[, !drops, with = F])
pred <- predict(model0, newdata=test[, !drops, with = F])
result <- data.table(id=test$id, future_price = pred)
sample_sub <- fread('./project/volume/data/raw/sample_sub.csv')
sample_sub$future_price <- NULL
setkey(sample_sub, id)
setkey(result, id)
sample_sub <- merge(sample_sub, result, sort = F)
fwrite(sample_sub, './project/volume/data/processed/submit_lm.csv')
drops <- c('id')
train <- train[, !drops, with=F]
test <- test[, !drops, with=F]
### make fake future_price for dummyVars
test$future_price <- 0
### work with dummies
dummies <- dummyVars(future_price ~ ., data=train)
train <- predict(dummies, newdata=train)
test <- predict(dummies, newdata=test)
### convert them back to data.table
train <- data.table(train)
test <- data.table(test)
View(train)
### glmnet needs matrix
train <- as.matrix(train)
### fit a model
model1 <- cv.glmnet(train, train_y, alpha=1, family="gaussian")
### choose the best lambda
best_lambda <- model1$lambda.min
### see what predictors chosen from the lambda
predict(model1, s=best_lambda, newx=test, type="coefficients")
model2 <- glmnet(train, train_y, alpha=1, family="gaussian")
plot_glmnet(model2)
### glmnet needs matrix
test <- as.matrix(test)
pred <- predict(model1, s=best_lambda, newx=test)
sample_sub <- fread("./project/volume/data/raw/sample_sub.csv")
sample_sub$future_price <- pred
fwrite(sample_sub, "./project/volume/data/processed/submit_lasso.csv")
model3 <- cv.glmnet(train, train_y, alpha = 0.7, family = "gaussian")
best_lambda3 <- model3$lambda.min
test <- as.matrix(test)
pred <- predict(model3, s=best_lambda3, newx=test)
plot_glmnet(model3)
sample_sub <- fread("./project/volume/data/raw/sample_sub.csv")
sample_sub$future_price <- pred
fwrite(sample_sub, "./project/volume/data/processed/submit_lasso.csv")
file.edit('./project/src/models/train_model.R')
# Libraries ---------------------------------------------------------------
library(data.table)
library(caret)
library(glmnet)
library(plotmo)
# Load train and test -----------------------------------------------------
train <- fread("./project/volume/data/interim/train.csv")
test <- fread("./project/volume/data/interim/test.csv")
### remove duplicates
train <- train[!duplicated(train),]
### keep future_price as train_y
train_y <- train$future_price
# Drop id -----------------------------------------------------------------
drops <- c('id')
train <- train[, !drops, with = FALSE]
test <- test[, !drops, with = FALSE]
# fit a linear model ------------------------------------------------------
model0 <- lm(future_price~., data=train)
summary(model0)
pred <- predict(model0, newdata=test)
sample_sub <- fread("./project/volume/data/raw/sample_sub.csv")
sample_sub$future_price <- pred
fwrite(sample_sub, "./project/volume/data/processed/submit_lm.csv")
# Make a submission file with merge
train <- fread('./project/volume/data/interim/train.csv')
test <- fread('./project/volume/data/interim/test.csv')
train <- train[!duplicated(train),]
train_y <- train$future_price
drops <- c('id')
model0 <- lm(future_price ~ ., data=train[, !drops, with = F])
pred <- predict(model0, newdata=test[, !drops, with = F])
result <- data.table(id=test$id, future_price = pred)
sample_sub <- fread('./project/volume/data/raw/sample_sub.csv')
sample_sub$future_price <- NULL
setkey(sample_sub, id)
setkey(result, id)
sample_sub <- merge(sample_sub, result, sort = F)
fwrite(sample_sub, './project/volume/data/processed/submit_lm.csv')
# fit a lasso model -------------------------------------------------------
drops <- c('id')
train <- train[, !drops, with=F]
test <- test[, !drops, with=F]
# Make dummy variables ----------------------------------------------------
### make fake future_price for dummyVars
test$future_price <- 0
### work with dummies
dummies <- dummyVars(future_price ~ ., data=train)
train <- predict(dummies, newdata=train)
test <- predict(dummies, newdata=test)
### convert them back to data.table
train <- data.table(train)
test <- data.table(test)
# Fit a model using cross-validation --------------------------------------
### glmnet needs matrix
train <- as.matrix(train)
### fit a model
model1 <- cv.glmnet(train, train_y, alpha=1, family="gaussian")
# alpha = 1 means lasso model
# alpha = 0 means ridge model
# alpha = 0.5 means mixture
### choose the best lambda
best_lambda <- model1$lambda.min
### see what predictors chosen from the lambda
predict(model1, s=best_lambda, newx=test, type="coefficients")
# Fit a full model --------------------------------------------------------
model2 <- glmnet(train, train_y, alpha=1, family="gaussian")
plot_glmnet(model2)
### save the model
saveRDS(model2,"./project/volume/models/model.model")
# Predict by the model ----------------------------------------------------
### glmnet needs matrix
test <- as.matrix(test)
pred <- predict(model1, s=best_lambda, newx=test)
# Make a model testing different alphas
model3 <- cv.glmnet(train, train_y, alpha = 0.7, family = "gaussian")
best_lambda3 <- model3$lambda.min
test <- as.matrix(test)
pred <- predict(model3, s=best_lambda3, newx=test)
# Make a submission file --------------------------------------------------
sample_sub <- fread("./project/volume/data/raw/sample_sub.csv")
sample_sub$future_price <- pred
fwrite(sample_sub, "./project/volume/data/processed/submit_lasso.csv")
View(test)
